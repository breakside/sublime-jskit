{
  "scope": "source.js - comment - string",
  "completions": [
    {
      "trigger": "exception\tUIApplication.LaunchFailureReason",
      "contents": "UIApplication.LaunchFailureReason.exception"
    },
    {
      "trigger": "filestyemNotAvailable\tUIApplication.LaunchFailureReason",
      "contents": "UIApplication.LaunchFailureReason.filestyemNotAvailable"
    },
    {
      "trigger": "upgradeRequiresNoOtherInstances\tUIApplication.LaunchFailureReason",
      "contents": "UIApplication.LaunchFailureReason.upgradeRequiresNoOtherInstances"
    },
    {
      "trigger": "mouse\tUIEvent.Category",
      "contents": "UIEvent.Category.mouse"
    },
    {
      "trigger": "key\tUIEvent.Category",
      "contents": "UIEvent.Category.key"
    },
    {
      "trigger": "touches\tUIEvent.Category",
      "contents": "UIEvent.Category.touches"
    },
    {
      "trigger": "scroll\tUIEvent.Category",
      "contents": "UIEvent.Category.scroll"
    },
    {
      "trigger": "gesture\tUIEvent.Category",
      "contents": "UIEvent.Category.gesture"
    },
    {
      "trigger": "leftMouseDown\tUIEvent.Type",
      "contents": "UIEvent.Type.leftMouseDown"
    },
    {
      "trigger": "leftMouseUp\tUIEvent.Type",
      "contents": "UIEvent.Type.leftMouseUp"
    },
    {
      "trigger": "leftMouseDragged\tUIEvent.Type",
      "contents": "UIEvent.Type.leftMouseDragged"
    },
    {
      "trigger": "rightMouseDown\tUIEvent.Type",
      "contents": "UIEvent.Type.rightMouseDown"
    },
    {
      "trigger": "rightMouseUp\tUIEvent.Type",
      "contents": "UIEvent.Type.rightMouseUp"
    },
    {
      "trigger": "rightMouseDragged\tUIEvent.Type",
      "contents": "UIEvent.Type.rightMouseDragged"
    },
    {
      "trigger": "mouseMoved\tUIEvent.Type",
      "contents": "UIEvent.Type.mouseMoved"
    },
    {
      "trigger": "mouseEntered\tUIEvent.Type",
      "contents": "UIEvent.Type.mouseEntered"
    },
    {
      "trigger": "mouseExited\tUIEvent.Type",
      "contents": "UIEvent.Type.mouseExited"
    },
    {
      "trigger": "keyDown\tUIEvent.Type",
      "contents": "UIEvent.Type.keyDown"
    },
    {
      "trigger": "keyUp\tUIEvent.Type",
      "contents": "UIEvent.Type.keyUp"
    },
    {
      "trigger": "touchesBegan\tUIEvent.Type",
      "contents": "UIEvent.Type.touchesBegan"
    },
    {
      "trigger": "touchesMoved\tUIEvent.Type",
      "contents": "UIEvent.Type.touchesMoved"
    },
    {
      "trigger": "touchesEnded\tUIEvent.Type",
      "contents": "UIEvent.Type.touchesEnded"
    },
    {
      "trigger": "touchesCanceled\tUIEvent.Type",
      "contents": "UIEvent.Type.touchesCanceled"
    },
    {
      "trigger": "scrollWheel\tUIEvent.Type",
      "contents": "UIEvent.Type.scrollWheel"
    },
    {
      "trigger": "magnify\tUIEvent.Type",
      "contents": "UIEvent.Type.magnify"
    },
    {
      "trigger": "rotate\tUIEvent.Type",
      "contents": "UIEvent.Type.rotate"
    },
    {
      "trigger": "none\tUIEvent.Modifier",
      "contents": "UIEvent.Modifier.none"
    },
    {
      "trigger": "command\tUIEvent.Modifier",
      "contents": "UIEvent.Modifier.command"
    },
    {
      "trigger": "control\tUIEvent.Modifier",
      "contents": "UIEvent.Modifier.control"
    },
    {
      "trigger": "shift\tUIEvent.Modifier",
      "contents": "UIEvent.Modifier.shift"
    },
    {
      "trigger": "option\tUIEvent.Modifier",
      "contents": "UIEvent.Modifier.option"
    },
    {
      "trigger": "optionControl\tUIEvent.Modifier",
      "contents": "UIEvent.Modifier.optionControl"
    },
    {
      "trigger": "optionShift\tUIEvent.Modifier",
      "contents": "UIEvent.Modifier.optionShift"
    },
    {
      "trigger": "optionControlShift\tUIEvent.Modifier",
      "contents": "UIEvent.Modifier.optionControlShift"
    },
    {
      "trigger": "controlShift\tUIEvent.Modifier",
      "contents": "UIEvent.Modifier.controlShift"
    },
    {
      "trigger": "unidentified\tUIEvent.Key",
      "contents": "UIEvent.Key.unidentified"
    },
    {
      "trigger": "option\tUIEvent.Key",
      "contents": "UIEvent.Key.option"
    },
    {
      "trigger": "control\tUIEvent.Key",
      "contents": "UIEvent.Key.control"
    },
    {
      "trigger": "command\tUIEvent.Key",
      "contents": "UIEvent.Key.command"
    },
    {
      "trigger": "shift\tUIEvent.Key",
      "contents": "UIEvent.Key.shift"
    },
    {
      "trigger": "function\tUIEvent.Key",
      "contents": "UIEvent.Key.function"
    },
    {
      "trigger": "enter\tUIEvent.Key",
      "contents": "UIEvent.Key.enter"
    },
    {
      "trigger": "tab\tUIEvent.Key",
      "contents": "UIEvent.Key.tab"
    },
    {
      "trigger": "backspace\tUIEvent.Key",
      "contents": "UIEvent.Key.backspace"
    },
    {
      "trigger": "delete\tUIEvent.Key",
      "contents": "UIEvent.Key.delete"
    },
    {
      "trigger": "down\tUIEvent.Key",
      "contents": "UIEvent.Key.down"
    },
    {
      "trigger": "left\tUIEvent.Key",
      "contents": "UIEvent.Key.left"
    },
    {
      "trigger": "right\tUIEvent.Key",
      "contents": "UIEvent.Key.right"
    },
    {
      "trigger": "up\tUIEvent.Key",
      "contents": "UIEvent.Key.up"
    },
    {
      "trigger": "escape\tUIEvent.Key",
      "contents": "UIEvent.Key.escape"
    },
    {
      "trigger": "redo\tUIEvent.Key",
      "contents": "UIEvent.Key.redo"
    },
    {
      "trigger": "undo\tUIEvent.Key",
      "contents": "UIEvent.Key.undo"
    },
    {
      "trigger": "end\tUIEvent.Key",
      "contents": "UIEvent.Key.end"
    },
    {
      "trigger": "home\tUIEvent.Key",
      "contents": "UIEvent.Key.home"
    },
    {
      "trigger": "pageDown\tUIEvent.Key",
      "contents": "UIEvent.Key.pageDown"
    },
    {
      "trigger": "pageUp\tUIEvent.Key",
      "contents": "UIEvent.Key.pageUp"
    },
    {
      "trigger": "capsLock\tUIEvent.Key",
      "contents": "UIEvent.Key.capsLock"
    },
    {
      "trigger": "functionLock\tUIEvent.Key",
      "contents": "UIEvent.Key.functionLock"
    },
    {
      "trigger": "numberLock\tUIEvent.Key",
      "contents": "UIEvent.Key.numberLock"
    },
    {
      "trigger": "scrollLock\tUIEvent.Key",
      "contents": "UIEvent.Key.scrollLock"
    },
    {
      "trigger": "symbol\tUIEvent.Key",
      "contents": "UIEvent.Key.symbol"
    },
    {
      "trigger": "symbolLock\tUIEvent.Key",
      "contents": "UIEvent.Key.symbolLock"
    },
    {
      "trigger": "clear\tUIEvent.Key",
      "contents": "UIEvent.Key.clear"
    },
    {
      "trigger": "copy\tUIEvent.Key",
      "contents": "UIEvent.Key.copy"
    },
    {
      "trigger": "cut\tUIEvent.Key",
      "contents": "UIEvent.Key.cut"
    },
    {
      "trigger": "eraseToEndOfField\tUIEvent.Key",
      "contents": "UIEvent.Key.eraseToEndOfField"
    },
    {
      "trigger": "extendSelection\tUIEvent.Key",
      "contents": "UIEvent.Key.extendSelection"
    },
    {
      "trigger": "insert\tUIEvent.Key",
      "contents": "UIEvent.Key.insert"
    },
    {
      "trigger": "paste\tUIEvent.Key",
      "contents": "UIEvent.Key.paste"
    },
    {
      "trigger": "cursorSelect\tUIEvent.Key",
      "contents": "UIEvent.Key.cursorSelect"
    },
    {
      "trigger": "none\tUIEvent.Phase",
      "contents": "UIEvent.Phase.none"
    },
    {
      "trigger": "began\tUIEvent.Phase",
      "contents": "UIEvent.Phase.began"
    },
    {
      "trigger": "changed\tUIEvent.Phase",
      "contents": "UIEvent.Phase.changed"
    },
    {
      "trigger": "ended\tUIEvent.Phase",
      "contents": "UIEvent.Phase.ended"
    },
    {
      "trigger": "began\tUITouch.Phase",
      "contents": "UITouch.Phase.began"
    },
    {
      "trigger": "moved\tUITouch.Phase",
      "contents": "UITouch.Phase.moved"
    },
    {
      "trigger": "ended\tUITouch.Phase",
      "contents": "UITouch.Phase.ended"
    },
    {
      "trigger": "canceled\tUITouch.Phase",
      "contents": "UITouch.Phase.canceled"
    },
    {
      "trigger": "none\tUILayer.Sides",
      "contents": "UILayer.Sides.none"
    },
    {
      "trigger": "minX\tUILayer.Sides",
      "contents": "UILayer.Sides.minX"
    },
    {
      "trigger": "maxX\tUILayer.Sides",
      "contents": "UILayer.Sides.maxX"
    },
    {
      "trigger": "minY\tUILayer.Sides",
      "contents": "UILayer.Sides.minY"
    },
    {
      "trigger": "maxY\tUILayer.Sides",
      "contents": "UILayer.Sides.maxY"
    },
    {
      "trigger": "minXmaxX\tUILayer.Sides",
      "contents": "UILayer.Sides.minXmaxX"
    },
    {
      "trigger": "minYmaxY\tUILayer.Sides",
      "contents": "UILayer.Sides.minYmaxY"
    },
    {
      "trigger": "all\tUILayer.Sides",
      "contents": "UILayer.Sides.all"
    },
    {
      "trigger": "none\tUILayer.Corners",
      "contents": "UILayer.Corners.none"
    },
    {
      "trigger": "minXminY\tUILayer.Corners",
      "contents": "UILayer.Corners.minXminY"
    },
    {
      "trigger": "minXmaxY\tUILayer.Corners",
      "contents": "UILayer.Corners.minXmaxY"
    },
    {
      "trigger": "maxXminY\tUILayer.Corners",
      "contents": "UILayer.Corners.maxXminY"
    },
    {
      "trigger": "maxXmaxY\tUILayer.Corners",
      "contents": "UILayer.Corners.maxXmaxY"
    },
    {
      "trigger": "minX\tUILayer.Corners",
      "contents": "UILayer.Corners.minX"
    },
    {
      "trigger": "maxX\tUILayer.Corners",
      "contents": "UILayer.Corners.maxX"
    },
    {
      "trigger": "minY\tUILayer.Corners",
      "contents": "UILayer.Corners.minY"
    },
    {
      "trigger": "maxY\tUILayer.Corners",
      "contents": "UILayer.Corners.maxY"
    },
    {
      "trigger": "all\tUILayer.Corners",
      "contents": "UILayer.Corners.all"
    },
    {
      "trigger": "none\tUIView.Sides",
      "contents": "UIView.Sides.none"
    },
    {
      "trigger": "minX\tUIView.Sides",
      "contents": "UIView.Sides.minX"
    },
    {
      "trigger": "maxX\tUIView.Sides",
      "contents": "UIView.Sides.maxX"
    },
    {
      "trigger": "minY\tUIView.Sides",
      "contents": "UIView.Sides.minY"
    },
    {
      "trigger": "maxY\tUIView.Sides",
      "contents": "UIView.Sides.maxY"
    },
    {
      "trigger": "minXmaxX\tUIView.Sides",
      "contents": "UIView.Sides.minXmaxX"
    },
    {
      "trigger": "minYmaxY\tUIView.Sides",
      "contents": "UIView.Sides.minYmaxY"
    },
    {
      "trigger": "all\tUIView.Sides",
      "contents": "UIView.Sides.all"
    },
    {
      "trigger": "none\tUIView.Corners",
      "contents": "UIView.Corners.none"
    },
    {
      "trigger": "minXminY\tUIView.Corners",
      "contents": "UIView.Corners.minXminY"
    },
    {
      "trigger": "minXmaxY\tUIView.Corners",
      "contents": "UIView.Corners.minXmaxY"
    },
    {
      "trigger": "maxXminY\tUIView.Corners",
      "contents": "UIView.Corners.maxXminY"
    },
    {
      "trigger": "maxXmaxY\tUIView.Corners",
      "contents": "UIView.Corners.maxXmaxY"
    },
    {
      "trigger": "minX\tUIView.Corners",
      "contents": "UIView.Corners.minX"
    },
    {
      "trigger": "maxX\tUIView.Corners",
      "contents": "UIView.Corners.maxX"
    },
    {
      "trigger": "minY\tUIView.Corners",
      "contents": "UIView.Corners.minY"
    },
    {
      "trigger": "maxY\tUIView.Corners",
      "contents": "UIView.Corners.maxY"
    },
    {
      "trigger": "all\tUIView.Corners",
      "contents": "UIView.Corners.all"
    },
    {
      "trigger": "none\tUIView.MouseTracking",
      "contents": "UIView.MouseTracking.none"
    },
    {
      "trigger": "move\tUIView.MouseTracking",
      "contents": "UIView.MouseTracking.move"
    },
    {
      "trigger": "enterAndExit\tUIView.MouseTracking",
      "contents": "UIView.MouseTracking.enterAndExit"
    },
    {
      "trigger": "all\tUIView.MouseTracking",
      "contents": "UIView.MouseTracking.all"
    },
    {
      "trigger": "default\tUIWindow.Styler",
      "contents": "UIWindow.Styler.default"
    },
    {
      "trigger": "custom\tUIWindow.Styler",
      "contents": "UIWindow.Styler.custom"
    },
    {
      "trigger": "back\tUIWindow.Level",
      "contents": "UIWindow.Level.back"
    },
    {
      "trigger": "normal\tUIWindow.Level",
      "contents": "UIWindow.Level.normal"
    },
    {
      "trigger": "front\tUIWindow.Level",
      "contents": "UIWindow.Level.front"
    },
    {
      "trigger": "default\tUIToolbar.ImageSize",
      "contents": "UIToolbar.ImageSize.default"
    },
    {
      "trigger": "small\tUIToolbar.ImageSize",
      "contents": "UIToolbar.ImageSize.small"
    },
    {
      "trigger": "custom\tUIToolbarItem.Identifier",
      "contents": "UIToolbarItem.Identifier.custom"
    },
    {
      "trigger": "space\tUIToolbarItem.Identifier",
      "contents": "UIToolbarItem.Identifier.space"
    },
    {
      "trigger": "flexibleSpace\tUIToolbarItem.Identifier",
      "contents": "UIToolbarItem.Identifier.flexibleSpace"
    },
    {
      "trigger": "linear\tUIAnimation.Timing",
      "contents": "UIAnimation.Timing.linear"
    },
    {
      "trigger": "easeIn\tUIAnimation.Timing",
      "contents": "UIAnimation.Timing.easeIn"
    },
    {
      "trigger": "easeOut\tUIAnimation.Timing",
      "contents": "UIAnimation.Timing.easeOut"
    },
    {
      "trigger": "easeInOut\tUIAnimation.Timing",
      "contents": "UIAnimation.Timing.easeInOut"
    },
    {
      "trigger": "bounds\tUIAnimation.Timing",
      "contents": "UIAnimation.Timing.bounds"
    },
    {
      "trigger": "cubicBezier\tUIAnimation.Timing",
      "contents": "UIAnimation.Timing.cubicBezier(${1:controlPoint1}, ${2:controlPoint2})"
    },
    {
      "trigger": "primaryAction\tUIControl.Event",
      "contents": "UIControl.Event.primaryAction"
    },
    {
      "trigger": "valueChanged\tUIControl.Event",
      "contents": "UIControl.Event.valueChanged"
    },
    {
      "trigger": "editingDidBegin\tUIControl.Event",
      "contents": "UIControl.Event.editingDidBegin"
    },
    {
      "trigger": "editingChanged\tUIControl.Event",
      "contents": "UIControl.Event.editingChanged"
    },
    {
      "trigger": "editingDidEnd\tUIControl.Event",
      "contents": "UIControl.Event.editingDidEnd"
    },
    {
      "trigger": "firstUserEvent\tUIControl.Event",
      "contents": "UIControl.Event.firstUserEvent"
    },
    {
      "trigger": "normal\tUIControl.State",
      "contents": "UIControl.State.normal"
    },
    {
      "trigger": "over\tUIControl.State",
      "contents": "UIControl.State.over"
    },
    {
      "trigger": "active\tUIControl.State",
      "contents": "UIControl.State.active"
    },
    {
      "trigger": "disabled\tUIControl.State",
      "contents": "UIControl.State.disabled"
    },
    {
      "trigger": "dropTarget\tUIControl.State",
      "contents": "UIControl.State.dropTarget"
    },
    {
      "trigger": "firstUserState\tUIControl.State",
      "contents": "UIControl.State.firstUserState"
    },
    {
      "trigger": "default\tUIButton.Styler",
      "contents": "UIButton.Styler.default"
    },
    {
      "trigger": "custom\tUIButton.Styler",
      "contents": "UIButton.Styler.custom"
    },
    {
      "trigger": "default\tUIPopupButton.Styler",
      "contents": "UIPopupButton.Styler.default"
    },
    {
      "trigger": "default\tUICheckbox.Styler",
      "contents": "UICheckbox.Styler.default"
    },
    {
      "trigger": "default\tUIRadioGroup.Styler",
      "contents": "UIRadioGroup.Styler.default"
    },
    {
      "trigger": "default\tUIRadioButton.Styler",
      "contents": "UIRadioButton.Styler.default"
    },
    {
      "trigger": "default\tUISegmentedControl.Styler",
      "contents": "UISegmentedControl.Styler.default"
    },
    {
      "trigger": "always\tUITextField.AccessoryVisibility",
      "contents": "UITextField.AccessoryVisibility.always"
    },
    {
      "trigger": "onlyWhenActive\tUITextField.AccessoryVisibility",
      "contents": "UITextField.AccessoryVisibility.onlyWhenActive"
    },
    {
      "trigger": "onlyWhenNotEmpty\tUITextField.AccessoryVisibility",
      "contents": "UITextField.AccessoryVisibility.onlyWhenNotEmpty"
    },
    {
      "trigger": "fit\tUIImageView.ScaleMode",
      "contents": "UIImageView.ScaleMode.fit"
    },
    {
      "trigger": "aspectFit\tUIImageView.ScaleMode",
      "contents": "UIImageView.ScaleMode.aspectFit"
    },
    {
      "trigger": "aspectFill\tUIImageView.ScaleMode",
      "contents": "UIImageView.ScaleMode.aspectFill"
    },
    {
      "trigger": "center\tUIImageView.ScaleMode",
      "contents": "UIImageView.ScaleMode.center"
    },
    {
      "trigger": "auto\tUIScrollView.ScrollPosition",
      "contents": "UIScrollView.ScrollPosition.auto"
    },
    {
      "trigger": "top\tUIScrollView.ScrollPosition",
      "contents": "UIScrollView.ScrollPosition.top"
    },
    {
      "trigger": "bottom\tUIScrollView.ScrollPosition",
      "contents": "UIScrollView.ScrollPosition.bottom"
    },
    {
      "trigger": "middle\tUIScrollView.ScrollPosition",
      "contents": "UIScrollView.ScrollPosition.middle"
    },
    {
      "trigger": "vertical\tUIScroller.Direction",
      "contents": "UIScroller.Direction.vertical"
    },
    {
      "trigger": "horizontal\tUIScroller.Direction",
      "contents": "UIScroller.Direction.horizontal"
    },
    {
      "trigger": "knobActive\tUIScroller.State",
      "contents": "UIScroller.State.knobActive"
    },
    {
      "trigger": "lightContent\tUIScroller.Styler",
      "contents": "UIScroller.Styler.lightContent"
    },
    {
      "trigger": "darkContent\tUIScroller.Styler",
      "contents": "UIScroller.Styler.darkContent"
    },
    {
      "trigger": "default\tUIListView.Styler",
      "contents": "UIListView.Styler.default"
    },
    {
      "trigger": "normal\tUIListViewCell.State",
      "contents": "UIListViewCell.State.normal"
    },
    {
      "trigger": "active\tUIListViewCell.State",
      "contents": "UIListViewCell.State.active"
    },
    {
      "trigger": "selected\tUIListViewCell.State",
      "contents": "UIListViewCell.State.selected"
    },
    {
      "trigger": "contextSelected\tUIListViewCell.State",
      "contents": "UIListViewCell.State.contextSelected"
    },
    {
      "trigger": "firstUserState\tUIListViewCell.State",
      "contents": "UIListViewCell.State.firstUserState"
    },
    {
      "trigger": "header\tUIListViewHeaderFooterView.Kind",
      "contents": "UIListViewHeaderFooterView.Kind.header"
    },
    {
      "trigger": "footer\tUIListViewHeaderFooterView.Kind",
      "contents": "UIListViewHeaderFooterView.Kind.footer"
    },
    {
      "trigger": "default\tUIOutlineView.Styler",
      "contents": "UIOutlineView.Styler.default"
    },
    {
      "trigger": "normal\tUIOutlineViewCell.State",
      "contents": "UIOutlineViewCell.State.normal"
    },
    {
      "trigger": "active\tUIOutlineViewCell.State",
      "contents": "UIOutlineViewCell.State.active"
    },
    {
      "trigger": "selected\tUIOutlineViewCell.State",
      "contents": "UIOutlineViewCell.State.selected"
    },
    {
      "trigger": "contextSelected\tUIOutlineViewCell.State",
      "contents": "UIOutlineViewCell.State.contextSelected"
    },
    {
      "trigger": "expanded\tUIOutlineViewCell.State",
      "contents": "UIOutlineViewCell.State.expanded"
    },
    {
      "trigger": "firstUserState\tUIOutlineViewCell.State",
      "contents": "UIOutlineViewCell.State.firstUserState"
    },
    {
      "trigger": "vertical\tUIStackView.Axis",
      "contents": "UIStackView.Axis.vertical"
    },
    {
      "trigger": "horizontal\tUIStackView.Axis",
      "contents": "UIStackView.Axis.horizontal"
    },
    {
      "trigger": "none\tUIStackView.Distribution",
      "contents": "UIStackView.Distribution.none"
    },
    {
      "trigger": "equal\tUIStackView.Distribution",
      "contents": "UIStackView.Distribution.equal"
    },
    {
      "trigger": "default\tUITabView.Styler",
      "contents": "UITabView.Styler.default"
    },
    {
      "trigger": "tabless\tUITabView.Styler",
      "contents": "UITabView.Styler.tabless"
    },
    {
      "trigger": "images\tUITabView.Styler",
      "contents": "UITabView.Styler.images"
    },
    {
      "trigger": "normal\tUITabViewItem.State",
      "contents": "UITabViewItem.State.normal"
    },
    {
      "trigger": "over\tUITabViewItem.State",
      "contents": "UITabViewItem.State.over"
    },
    {
      "trigger": "active\tUITabViewItem.State",
      "contents": "UITabViewItem.State.active"
    },
    {
      "trigger": "selected\tUITabViewItem.State",
      "contents": "UITabViewItem.State.selected"
    },
    {
      "trigger": "plainText\tUIPasteboard.ContentType",
      "contents": "UIPasteboard.ContentType.plainText"
    },
    {
      "trigger": "html\tUIPasteboard.ContentType",
      "contents": "UIPasteboard.ContentType.html"
    },
    {
      "trigger": "anyFile\tUIPasteboard.ContentType",
      "contents": "UIPasteboard.ContentType.anyFile"
    },
    {
      "trigger": "none\tUIDraggingSession.UIDragOperation",
      "contents": "UIDraggingSession.UIDragOperation.none"
    },
    {
      "trigger": "copy\tUIDraggingSession.UIDragOperation",
      "contents": "UIDraggingSession.UIDragOperation.copy"
    },
    {
      "trigger": "link\tUIDraggingSession.UIDragOperation",
      "contents": "UIDraggingSession.UIDragOperation.link"
    },
    {
      "trigger": "move\tUIDraggingSession.UIDragOperation",
      "contents": "UIDraggingSession.UIDragOperation.move"
    },
    {
      "trigger": "all\tUIDraggingSession.UIDragOperation",
      "contents": "UIDraggingSession.UIDragOperation.all"
    },
    {
      "trigger": "above\tUIPopupWindow.Placement",
      "contents": "UIPopupWindow.Placement.above"
    },
    {
      "trigger": "below\tUIPopupWindow.Placement",
      "contents": "UIPopupWindow.Placement.below"
    },
    {
      "trigger": "left\tUIPopupWindow.Placement",
      "contents": "UIPopupWindow.Placement.left"
    },
    {
      "trigger": "right\tUIPopupWindow.Placement",
      "contents": "UIPopupWindow.Placement.right"
    },
    {
      "trigger": "default\tUIPopupWindow.Styler",
      "contents": "UIPopupWindow.Styler.default"
    },
    {
      "trigger": "dark\tUIActivityIndicatorView.Style",
      "contents": "UIActivityIndicatorView.Style.dark"
    },
    {
      "trigger": "light\tUIActivityIndicatorView.Style",
      "contents": "UIActivityIndicatorView.Style.light"
    },
    {
      "trigger": "linear\tUIProgressIndicatorView.Style",
      "contents": "UIProgressIndicatorView.Style.linear"
    },
    {
      "trigger": "circular\tUIProgressIndicatorView.Style",
      "contents": "UIProgressIndicatorView.Style.circular"
    },
    {
      "trigger": "below\tUIMenu.Placement",
      "contents": "UIMenu.Placement.below"
    },
    {
      "trigger": "right\tUIMenu.Placement",
      "contents": "UIMenu.Placement.right"
    },
    {
      "trigger": "above\tUIMenu.Placement",
      "contents": "UIMenu.Placement.above"
    },
    {
      "trigger": "left\tUIMenu.Placement",
      "contents": "UIMenu.Placement.left"
    },
    {
      "trigger": "default\tUIMenu.Styler",
      "contents": "UIMenu.Styler.default"
    },
    {
      "trigger": "off\tUIMenuItem.State",
      "contents": "UIMenuItem.State.off"
    },
    {
      "trigger": "on\tUIMenuItem.State",
      "contents": "UIMenuItem.State.on"
    },
    {
      "trigger": "mixed\tUIMenuItem.State",
      "contents": "UIMenuItem.State.mixed"
    },
    {
      "trigger": "normal\tUIMenuBarItem.State",
      "contents": "UIMenuBarItem.State.normal"
    },
    {
      "trigger": "active\tUIMenuBarItem.State",
      "contents": "UIMenuBarItem.State.active"
    },
    {
      "trigger": "unknown\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.unknown"
    },
    {
      "trigger": "noResponse\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.noResponse"
    },
    {
      "trigger": "continue\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.continue"
    },
    {
      "trigger": "switchingProtocols\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.switchingProtocols"
    },
    {
      "trigger": "ok\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.ok"
    },
    {
      "trigger": "created\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.created"
    },
    {
      "trigger": "accepted\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.accepted"
    },
    {
      "trigger": "nonAuthorativeInformation\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.nonAuthorativeInformation"
    },
    {
      "trigger": "noContent\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.noContent"
    },
    {
      "trigger": "resetContent\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.resetContent"
    },
    {
      "trigger": "partialContent\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.partialContent"
    },
    {
      "trigger": "multipleChoices\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.multipleChoices"
    },
    {
      "trigger": "movedPermanently\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.movedPermanently"
    },
    {
      "trigger": "found\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.found"
    },
    {
      "trigger": "seeOther\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.seeOther"
    },
    {
      "trigger": "notModified\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.notModified"
    },
    {
      "trigger": "useProxy\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.useProxy"
    },
    {
      "trigger": "temporaryRedirect\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.temporaryRedirect"
    },
    {
      "trigger": "badRequest\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.badRequest"
    },
    {
      "trigger": "unauthorized\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.unauthorized"
    },
    {
      "trigger": "paymentRequired\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.paymentRequired"
    },
    {
      "trigger": "forbidden\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.forbidden"
    },
    {
      "trigger": "notFound\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.notFound"
    },
    {
      "trigger": "methodNotAllowed\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.methodNotAllowed"
    },
    {
      "trigger": "notAcceptable\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.notAcceptable"
    },
    {
      "trigger": "proxyAuthenticationRequired\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.proxyAuthenticationRequired"
    },
    {
      "trigger": "requestTimeout\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.requestTimeout"
    },
    {
      "trigger": "conflict\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.conflict"
    },
    {
      "trigger": "gone\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.gone"
    },
    {
      "trigger": "lengthRequired\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.lengthRequired"
    },
    {
      "trigger": "preconditionFailed\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.preconditionFailed"
    },
    {
      "trigger": "payloadTooLarge\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.payloadTooLarge"
    },
    {
      "trigger": "uriTooLong\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.uriTooLong"
    },
    {
      "trigger": "unsupportedMediaType\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.unsupportedMediaType"
    },
    {
      "trigger": "rangeNotSatisfiable\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.rangeNotSatisfiable"
    },
    {
      "trigger": "expectationFailed\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.expectationFailed"
    },
    {
      "trigger": "upgradeRequired\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.upgradeRequired"
    },
    {
      "trigger": "internalServerError\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.internalServerError"
    },
    {
      "trigger": "notImplemented\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.notImplemented"
    },
    {
      "trigger": "nadGateway\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.nadGateway"
    },
    {
      "trigger": "serviceUnavailable\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.serviceUnavailable"
    },
    {
      "trigger": "gatewayTimeout\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.gatewayTimeout"
    },
    {
      "trigger": "httpVersionNotSupported\tSKHTTPResponse.StatusCode",
      "contents": "SKHTTPResponse.StatusCode.httpVersionNotSupported"
    },
    {
      "trigger": "contentType\tSKHTTPHeaders",
      "contents": "SKHTTPHeaders.contentType"
    },
    {
      "trigger": "contentLength\tSKHTTPHeaders",
      "contents": "SKHTTPHeaders.contentLength"
    },
    {
      "trigger": "etag\tSKHTTPHeaders",
      "contents": "SKHTTPHeaders.etag"
    },
    {
      "trigger": "lastModified\tSKHTTPHeaders",
      "contents": "SKHTTPHeaders.lastModified"
    },
    {
      "trigger": "normal\tSKHTTPWebSocket.Status",
      "contents": "SKHTTPWebSocket.Status.normal"
    },
    {
      "trigger": "goingAway\tSKHTTPWebSocket.Status",
      "contents": "SKHTTPWebSocket.Status.goingAway"
    },
    {
      "trigger": "protocolError\tSKHTTPWebSocket.Status",
      "contents": "SKHTTPWebSocket.Status.protocolError"
    },
    {
      "trigger": "unsupportedDataType\tSKHTTPWebSocket.Status",
      "contents": "SKHTTPWebSocket.Status.unsupportedDataType"
    },
    {
      "trigger": "invalidData\tSKHTTPWebSocket.Status",
      "contents": "SKHTTPWebSocket.Status.invalidData"
    },
    {
      "trigger": "generic\tSKHTTPWebSocket.Status",
      "contents": "SKHTTPWebSocket.Status.generic"
    },
    {
      "trigger": "messageTooLarge\tSKHTTPWebSocket.Status",
      "contents": "SKHTTPWebSocket.Status.messageTooLarge"
    },
    {
      "trigger": "utf8\tString.Encoding",
      "contents": "String.Encoding.utf8"
    },
    {
      "trigger": "utf16be\tString.Encoding",
      "contents": "String.Encoding.utf16be"
    },
    {
      "trigger": "utf16le\tString.Encoding",
      "contents": "String.Encoding.utf16le"
    },
    {
      "trigger": "iso8859_1\tString.Encoding",
      "contents": "String.Encoding.iso8859_1"
    },
    {
      "trigger": "latin1\tString.Encoding",
      "contents": "String.Encoding.latin1"
    },
    {
      "trigger": "font\tJSAttributedString.Attribute",
      "contents": "JSAttributedString.Attribute.font"
    },
    {
      "trigger": "textColor\tJSAttributedString.Attribute",
      "contents": "JSAttributedString.Attribute.textColor"
    },
    {
      "trigger": "backgroundColor\tJSAttributedString.Attribute",
      "contents": "JSAttributedString.Attribute.backgroundColor"
    },
    {
      "trigger": "bold\tJSAttributedString.Attribute",
      "contents": "JSAttributedString.Attribute.bold"
    },
    {
      "trigger": "italic\tJSAttributedString.Attribute",
      "contents": "JSAttributedString.Attribute.italic"
    },
    {
      "trigger": "underline\tJSAttributedString.Attribute",
      "contents": "JSAttributedString.Attribute.underline"
    },
    {
      "trigger": "strike\tJSAttributedString.Attribute",
      "contents": "JSAttributedString.Attribute.strike"
    },
    {
      "trigger": "attachment\tJSAttributedString.Attribute",
      "contents": "JSAttributedString.Attribute.attachment"
    },
    {
      "trigger": "lineHeight\tJSAttributedString.Attribute",
      "contents": "JSAttributedString.Attribute.lineHeight"
    },
    {
      "trigger": "lineSpacing\tJSAttributedString.Attribute",
      "contents": "JSAttributedString.Attribute.lineSpacing"
    },
    {
      "trigger": "textAlignment\tJSAttributedString.Attribute",
      "contents": "JSAttributedString.Attribute.textAlignment"
    },
    {
      "trigger": "lineBreakMode\tJSAttributedString.Attribute",
      "contents": "JSAttributedString.Attribute.lineBreakMode"
    },
    {
      "trigger": "maskCharacter\tJSAttributedString.Attribute",
      "contents": "JSAttributedString.Attribute.maskCharacter"
    },
    {
      "trigger": "gregorian\tJSCalendar.Identifier",
      "contents": "JSCalendar.Identifier.gregorian"
    },
    {
      "trigger": "none\tJSCalendar.Unit",
      "contents": "JSCalendar.Unit.none"
    },
    {
      "trigger": "calendar\tJSCalendar.Unit",
      "contents": "JSCalendar.Unit.calendar"
    },
    {
      "trigger": "era\tJSCalendar.Unit",
      "contents": "JSCalendar.Unit.era"
    },
    {
      "trigger": "year\tJSCalendar.Unit",
      "contents": "JSCalendar.Unit.year"
    },
    {
      "trigger": "month\tJSCalendar.Unit",
      "contents": "JSCalendar.Unit.month"
    },
    {
      "trigger": "day\tJSCalendar.Unit",
      "contents": "JSCalendar.Unit.day"
    },
    {
      "trigger": "hour\tJSCalendar.Unit",
      "contents": "JSCalendar.Unit.hour"
    },
    {
      "trigger": "minute\tJSCalendar.Unit",
      "contents": "JSCalendar.Unit.minute"
    },
    {
      "trigger": "second\tJSCalendar.Unit",
      "contents": "JSCalendar.Unit.second"
    },
    {
      "trigger": "millisecond\tJSCalendar.Unit",
      "contents": "JSCalendar.Unit.millisecond"
    },
    {
      "trigger": "weekday\tJSCalendar.Unit",
      "contents": "JSCalendar.Unit.weekday"
    },
    {
      "trigger": "timezone\tJSCalendar.Unit",
      "contents": "JSCalendar.Unit.timezone"
    },
    {
      "trigger": "fill\tJSContext.DrawingMode",
      "contents": "JSContext.DrawingMode.fill"
    },
    {
      "trigger": "evenOddFill\tJSContext.DrawingMode",
      "contents": "JSContext.DrawingMode.evenOddFill"
    },
    {
      "trigger": "stroke\tJSContext.DrawingMode",
      "contents": "JSContext.DrawingMode.stroke"
    },
    {
      "trigger": "fillStroke\tJSContext.DrawingMode",
      "contents": "JSContext.DrawingMode.fillStroke"
    },
    {
      "trigger": "evenOddFillStroke\tJSContext.DrawingMode",
      "contents": "JSContext.DrawingMode.evenOddFillStroke"
    },
    {
      "trigger": "winding\tJSContext.FillRule",
      "contents": "JSContext.FillRule.winding"
    },
    {
      "trigger": "evenOdd\tJSContext.FillRule",
      "contents": "JSContext.FillRule.evenOdd"
    },
    {
      "trigger": "butt\tJSContext.LineCap",
      "contents": "JSContext.LineCap.butt"
    },
    {
      "trigger": "round\tJSContext.LineCap",
      "contents": "JSContext.LineCap.round"
    },
    {
      "trigger": "square\tJSContext.LineCap",
      "contents": "JSContext.LineCap.square"
    },
    {
      "trigger": "round\tJSContext.LineJoin",
      "contents": "JSContext.LineJoin.round"
    },
    {
      "trigger": "bevel\tJSContext.LineJoin",
      "contents": "JSContext.LineJoin.bevel"
    },
    {
      "trigger": "miter\tJSContext.LineJoin",
      "contents": "JSContext.LineJoin.miter"
    },
    {
      "trigger": "rgb\tJSColor.SpaceIdentifier",
      "contents": "JSColor.SpaceIdentifier.rgb"
    },
    {
      "trigger": "rgba\tJSColor.SpaceIdentifier",
      "contents": "JSColor.SpaceIdentifier.rgba"
    },
    {
      "trigger": "hsl\tJSColor.SpaceIdentifier",
      "contents": "JSColor.SpaceIdentifier.hsl"
    },
    {
      "trigger": "hsla\tJSColor.SpaceIdentifier",
      "contents": "JSColor.SpaceIdentifier.hsla"
    },
    {
      "trigger": "gray\tJSColor.SpaceIdentifier",
      "contents": "JSColor.SpaceIdentifier.gray"
    },
    {
      "trigger": "graya\tJSColor.SpaceIdentifier",
      "contents": "JSColor.SpaceIdentifier.graya"
    },
    {
      "trigger": "automatic\tJSImage.RenderMode",
      "contents": "JSImage.RenderMode.automatic"
    },
    {
      "trigger": "original\tJSImage.RenderMode",
      "contents": "JSImage.RenderMode.original"
    },
    {
      "trigger": "template\tJSImage.RenderMode",
      "contents": "JSImage.RenderMode.template"
    },
    {
      "trigger": "default\tJSArguments.Kind",
      "contents": "JSArguments.Kind.default"
    },
    {
      "trigger": "flag\tJSArguments.Kind",
      "contents": "JSArguments.Kind.flag"
    },
    {
      "trigger": "positional\tJSArguments.Kind",
      "contents": "JSArguments.Kind.positional"
    },
    {
      "trigger": "unknown\tJSArguments.Kind",
      "contents": "JSArguments.Kind.unknown"
    },
    {
      "trigger": "string\tJSArguments.ValueType",
      "contents": "JSArguments.ValueType.string"
    },
    {
      "trigger": "integer\tJSArguments.ValueType",
      "contents": "JSArguments.ValueType.integer"
    },
    {
      "trigger": "debug\tJSLog.Level",
      "contents": "JSLog.Level.debug"
    },
    {
      "trigger": "info\tJSLog.Level",
      "contents": "JSLog.Level.info"
    },
    {
      "trigger": "log\tJSLog.Level",
      "contents": "JSLog.Level.log"
    },
    {
      "trigger": "warn\tJSLog.Level",
      "contents": "JSLog.Level.warn"
    },
    {
      "trigger": "error\tJSLog.Level",
      "contents": "JSLog.Level.error"
    },
    {
      "trigger": "GET\tJSURLRequest.Method",
      "contents": "JSURLRequest.Method.GET"
    },
    {
      "trigger": "POST\tJSURLRequest.Method",
      "contents": "JSURLRequest.Method.POST"
    },
    {
      "trigger": "PUT\tJSURLRequest.Method",
      "contents": "JSURLRequest.Method.PUT"
    },
    {
      "trigger": "DELETE\tJSURLRequest.Method",
      "contents": "JSURLRequest.Method.DELETE"
    },
    {
      "trigger": "unknown\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.unknown"
    },
    {
      "trigger": "noResponse\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.noResponse"
    },
    {
      "trigger": "continue\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.continue"
    },
    {
      "trigger": "switchingProtocols\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.switchingProtocols"
    },
    {
      "trigger": "ok\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.ok"
    },
    {
      "trigger": "created\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.created"
    },
    {
      "trigger": "accepted\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.accepted"
    },
    {
      "trigger": "nonAuthorativeInformation\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.nonAuthorativeInformation"
    },
    {
      "trigger": "noContent\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.noContent"
    },
    {
      "trigger": "resetContent\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.resetContent"
    },
    {
      "trigger": "partialContent\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.partialContent"
    },
    {
      "trigger": "multipleChoices\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.multipleChoices"
    },
    {
      "trigger": "movedPermanently\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.movedPermanently"
    },
    {
      "trigger": "found\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.found"
    },
    {
      "trigger": "seeOther\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.seeOther"
    },
    {
      "trigger": "notModified\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.notModified"
    },
    {
      "trigger": "useProxy\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.useProxy"
    },
    {
      "trigger": "temporaryRedirect\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.temporaryRedirect"
    },
    {
      "trigger": "badRequest\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.badRequest"
    },
    {
      "trigger": "unauthorized\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.unauthorized"
    },
    {
      "trigger": "paymentRequired\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.paymentRequired"
    },
    {
      "trigger": "forbidden\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.forbidden"
    },
    {
      "trigger": "notFound\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.notFound"
    },
    {
      "trigger": "methodNotAllowed\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.methodNotAllowed"
    },
    {
      "trigger": "notAcceptable\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.notAcceptable"
    },
    {
      "trigger": "proxyAuthenticationRequired\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.proxyAuthenticationRequired"
    },
    {
      "trigger": "requestTimeout\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.requestTimeout"
    },
    {
      "trigger": "conflict\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.conflict"
    },
    {
      "trigger": "gone\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.gone"
    },
    {
      "trigger": "lengthRequired\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.lengthRequired"
    },
    {
      "trigger": "preconditionFailed\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.preconditionFailed"
    },
    {
      "trigger": "payloadTooLarge\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.payloadTooLarge"
    },
    {
      "trigger": "uriTooLong\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.uriTooLong"
    },
    {
      "trigger": "unsupportedMediaType\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.unsupportedMediaType"
    },
    {
      "trigger": "rangeNotSatisfiable\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.rangeNotSatisfiable"
    },
    {
      "trigger": "expectationFailed\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.expectationFailed"
    },
    {
      "trigger": "upgradeRequired\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.upgradeRequired"
    },
    {
      "trigger": "internalServerError\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.internalServerError"
    },
    {
      "trigger": "notImplemented\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.notImplemented"
    },
    {
      "trigger": "nadGateway\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.nadGateway"
    },
    {
      "trigger": "serviceUnavailable\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.serviceUnavailable"
    },
    {
      "trigger": "gatewayTimeout\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.gatewayTimeout"
    },
    {
      "trigger": "httpVersionNotSupported\tJSURLResponse.StatusCode",
      "contents": "JSURLResponse.StatusCode.httpVersionNotSupported"
    },
    {
      "trigger": "unknown\tJSURLResponse.StatusClass",
      "contents": "JSURLResponse.StatusClass.unknown"
    },
    {
      "trigger": "noResponse\tJSURLResponse.StatusClass",
      "contents": "JSURLResponse.StatusClass.noResponse"
    },
    {
      "trigger": "informational\tJSURLResponse.StatusClass",
      "contents": "JSURLResponse.StatusClass.informational"
    },
    {
      "trigger": "success\tJSURLResponse.StatusClass",
      "contents": "JSURLResponse.StatusClass.success"
    },
    {
      "trigger": "redirect\tJSURLResponse.StatusClass",
      "contents": "JSURLResponse.StatusClass.redirect"
    },
    {
      "trigger": "clientError\tJSURLResponse.StatusClass",
      "contents": "JSURLResponse.StatusClass.clientError"
    },
    {
      "trigger": "serverError\tJSURLResponse.StatusClass",
      "contents": "JSURLResponse.StatusClass.serverError"
    },
    {
      "trigger": "normal\tJSFont.Size",
      "contents": "JSFont.Size.normal"
    },
    {
      "trigger": "detail\tJSFont.Size",
      "contents": "JSFont.Size.detail"
    },
    {
      "trigger": "heading\tJSFont.Size",
      "contents": "JSFont.Size.heading"
    },
    {
      "trigger": "ultraLight\tJSFont.Weight",
      "contents": "JSFont.Weight.ultraLight"
    },
    {
      "trigger": "thin\tJSFont.Weight",
      "contents": "JSFont.Weight.thin"
    },
    {
      "trigger": "light\tJSFont.Weight",
      "contents": "JSFont.Weight.light"
    },
    {
      "trigger": "regular\tJSFont.Weight",
      "contents": "JSFont.Weight.regular"
    },
    {
      "trigger": "medium\tJSFont.Weight",
      "contents": "JSFont.Weight.medium"
    },
    {
      "trigger": "semibold\tJSFont.Weight",
      "contents": "JSFont.Weight.semibold"
    },
    {
      "trigger": "bold\tJSFont.Weight",
      "contents": "JSFont.Weight.bold"
    },
    {
      "trigger": "heavy\tJSFont.Weight",
      "contents": "JSFont.Weight.heavy"
    },
    {
      "trigger": "black\tJSFont.Weight",
      "contents": "JSFont.Weight.black"
    },
    {
      "trigger": "normal\tJSFont.Style",
      "contents": "JSFont.Style.normal"
    },
    {
      "trigger": "italic\tJSFont.Style",
      "contents": "JSFont.Style.italic"
    },
    {
      "trigger": "left\tJSTextAlignment",
      "contents": "JSTextAlignment.left"
    },
    {
      "trigger": "center\tJSTextAlignment",
      "contents": "JSTextAlignment.center"
    },
    {
      "trigger": "right\tJSTextAlignment",
      "contents": "JSTextAlignment.right"
    },
    {
      "trigger": "truncateTail\tJSLineBreakMode",
      "contents": "JSLineBreakMode.truncateTail"
    },
    {
      "trigger": "wordWrap\tJSLineBreakMode",
      "contents": "JSLineBreakMode.wordWrap"
    },
    {
      "trigger": "characterWrap\tJSLineBreakMode",
      "contents": "JSLineBreakMode.characterWrap"
    },
    {
      "trigger": "none\tJSNumberFormatter.Style",
      "contents": "JSNumberFormatter.Style.none"
    },
    {
      "trigger": "decimal\tJSNumberFormatter.Style",
      "contents": "JSNumberFormatter.Style.decimal"
    },
    {
      "trigger": "percent\tJSNumberFormatter.Style",
      "contents": "JSNumberFormatter.Style.percent"
    },
    {
      "trigger": "currency\tJSNumberFormatter.Style",
      "contents": "JSNumberFormatter.Style.currency"
    },
    {
      "trigger": "currencyAccounting\tJSNumberFormatter.Style",
      "contents": "JSNumberFormatter.Style.currencyAccounting"
    },
    {
      "trigger": "currencyISOCode\tJSNumberFormatter.Style",
      "contents": "JSNumberFormatter.Style.currencyISOCode"
    },
    {
      "trigger": "aesCipherBlockChaining\tSECCipher.Algorithm",
      "contents": "SECCipher.Algorithm.aesCipherBlockChaining"
    },
    {
      "trigger": "aesCBC\tSECCipher.Algorithm",
      "contents": "SECCipher.Algorithm.aesCBC"
    },
    {
      "trigger": "aesCounter\tSECCipher.Algorithm",
      "contents": "SECCipher.Algorithm.aesCounter"
    },
    {
      "trigger": "aesCTR\tSECCipher.Algorithm",
      "contents": "SECCipher.Algorithm.aesCTR"
    },
    {
      "trigger": "aesGaloisCounterMode\tSECCipher.Algorithm",
      "contents": "SECCipher.Algorithm.aesGaloisCounterMode"
    },
    {
      "trigger": "aesGCM\tSECCipher.Algorithm",
      "contents": "SECCipher.Algorithm.aesGCM"
    },
    {
      "trigger": "rivestCipher4\tSECCipher.Algorithm",
      "contents": "SECCipher.Algorithm.rivestCipher4"
    },
    {
      "trigger": "rc4\tSECCipher.Algorithm",
      "contents": "SECCipher.Algorithm.rc4"
    },
    {
      "trigger": "sha256\tSECHMAC.Algorithm",
      "contents": "SECHMAC.Algorithm.sha256"
    },
    {
      "trigger": "sha384\tSECHMAC.Algorithm",
      "contents": "SECHMAC.Algorithm.sha384"
    },
    {
      "trigger": "sha512\tSECHMAC.Algorithm",
      "contents": "SECHMAC.Algorithm.sha512"
    },
    {
      "trigger": "rsaSHA256\tSECSign.Algorithm",
      "contents": "SECSign.Algorithm.rsaSHA256"
    },
    {
      "trigger": "rsaSHA384\tSECSign.Algorithm",
      "contents": "SECSign.Algorithm.rsaSHA384"
    },
    {
      "trigger": "rsaSHA512\tSECSign.Algorithm",
      "contents": "SECSign.Algorithm.rsaSHA512"
    },
    {
      "trigger": "rsaSHA256\tSECVerify.Algorithm",
      "contents": "SECVerify.Algorithm.rsaSHA256"
    },
    {
      "trigger": "rsaSHA384\tSECVerify.Algorithm",
      "contents": "SECVerify.Algorithm.rsaSHA384"
    },
    {
      "trigger": "rsaSHA512\tSECVerify.Algorithm",
      "contents": "SECVerify.Algorithm.rsaSHA512"
    },
    {
      "trigger": "sha256\tSECHash.Algorithm",
      "contents": "SECHash.Algorithm.sha256"
    },
    {
      "trigger": "sha384\tSECHash.Algorithm",
      "contents": "SECHash.Algorithm.sha384"
    },
    {
      "trigger": "sha512\tSECHash.Algorithm",
      "contents": "SECHash.Algorithm.sha512"
    },
    {
      "trigger": "unknown\tIKBitmap.Format",
      "contents": "IKBitmap.Format.unknown"
    },
    {
      "trigger": "png\tIKBitmap.Format",
      "contents": "IKBitmap.Format.png"
    },
    {
      "trigger": "jpeg\tIKBitmap.Format",
      "contents": "IKBitmap.Format.jpeg"
    },
    {
      "trigger": "open\tPDFReader.Status",
      "contents": "PDFReader.Status.open"
    },
    {
      "trigger": "error\tPDFReader.Status",
      "contents": "PDFReader.Status.error"
    },
    {
      "trigger": "passwordRequired\tPDFReader.Status",
      "contents": "PDFReader.Status.passwordRequired"
    },
    {
      "trigger": "unsupportedVersion\tPDFReader.Status",
      "contents": "PDFReader.Status.unsupportedVersion"
    },
    {
      "trigger": "unsupportedEncryption\tPDFReader.Status",
      "contents": "PDFReader.Status.unsupportedEncryption"
    },
    {
      "trigger": "pushState\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.pushState"
    },
    {
      "trigger": "popState\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.popState"
    },
    {
      "trigger": "concatenateCTM\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.concatenateCTM"
    },
    {
      "trigger": "lineWidth\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.lineWidth"
    },
    {
      "trigger": "lineCap\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.lineCap"
    },
    {
      "trigger": "lineJoin\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.lineJoin"
    },
    {
      "trigger": "miterLimit\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.miterLimit"
    },
    {
      "trigger": "dashPattern\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.dashPattern"
    },
    {
      "trigger": "renderingIntent\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.renderingIntent"
    },
    {
      "trigger": "flatness\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.flatness"
    },
    {
      "trigger": "updateState\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.updateState"
    },
    {
      "trigger": "moveTo\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.moveTo"
    },
    {
      "trigger": "lineTo\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.lineTo"
    },
    {
      "trigger": "curveTo\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.curveTo"
    },
    {
      "trigger": "curveToUsingCurrent\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.curveToUsingCurrent"
    },
    {
      "trigger": "curveToUsingEnding\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.curveToUsingEnding"
    },
    {
      "trigger": "closeSubpath\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.closeSubpath"
    },
    {
      "trigger": "rectangle\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.rectangle"
    },
    {
      "trigger": "endPath\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.endPath"
    },
    {
      "trigger": "clip\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.clip"
    },
    {
      "trigger": "clipEvenOdd\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.clipEvenOdd"
    },
    {
      "trigger": "strokePath\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.strokePath"
    },
    {
      "trigger": "closeStrokePath\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.closeStrokePath"
    },
    {
      "trigger": "fillPath\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.fillPath"
    },
    {
      "trigger": "fillPathAlias\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.fillPathAlias"
    },
    {
      "trigger": "fillPathEvenOdd\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.fillPathEvenOdd"
    },
    {
      "trigger": "fillStrokePath\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.fillStrokePath"
    },
    {
      "trigger": "fillStrokePathEvenOdd\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.fillStrokePathEvenOdd"
    },
    {
      "trigger": "closeFillStrokePath\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.closeFillStrokePath"
    },
    {
      "trigger": "closeFillStrokePathEvenOdd\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.closeFillStrokePathEvenOdd"
    },
    {
      "trigger": "strokeColorSpace\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.strokeColorSpace"
    },
    {
      "trigger": "fillColorSpace\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.fillColorSpace"
    },
    {
      "trigger": "strokeColor\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.strokeColor"
    },
    {
      "trigger": "fillColor\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.fillColor"
    },
    {
      "trigger": "strokeColorNamed\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.strokeColorNamed"
    },
    {
      "trigger": "fillColorNamed\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.fillColorNamed"
    },
    {
      "trigger": "strokeColorGray\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.strokeColorGray"
    },
    {
      "trigger": "fillColorGray\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.fillColorGray"
    },
    {
      "trigger": "strokeColorRGB\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.strokeColorRGB"
    },
    {
      "trigger": "fillColorRGB\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.fillColorRGB"
    },
    {
      "trigger": "strokeColorCMYK\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.strokeColorCMYK"
    },
    {
      "trigger": "fillColorCMYK\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.fillColorCMYK"
    },
    {
      "trigger": "shading\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.shading"
    },
    {
      "trigger": "xobject\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.xobject"
    },
    {
      "trigger": "beginImage\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.beginImage"
    },
    {
      "trigger": "beginImageData\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.beginImageData"
    },
    {
      "trigger": "endImage\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.endImage"
    },
    {
      "trigger": "characterSpacing\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.characterSpacing"
    },
    {
      "trigger": "wordSpacing\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.wordSpacing"
    },
    {
      "trigger": "textHorizontalScaling\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.textHorizontalScaling"
    },
    {
      "trigger": "textLeading\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.textLeading"
    },
    {
      "trigger": "font\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.font"
    },
    {
      "trigger": "textRenderingMode\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.textRenderingMode"
    },
    {
      "trigger": "textRise\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.textRise"
    },
    {
      "trigger": "beginText\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.beginText"
    },
    {
      "trigger": "endText\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.endText"
    },
    {
      "trigger": "textMatrix\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.textMatrix"
    },
    {
      "trigger": "nextLineManual\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.nextLineManual"
    },
    {
      "trigger": "nextLineLeading\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.nextLineLeading"
    },
    {
      "trigger": "nextLine\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.nextLine"
    },
    {
      "trigger": "nextLineText\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.nextLineText"
    },
    {
      "trigger": "text\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.text"
    },
    {
      "trigger": "textArray\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.textArray"
    },
    {
      "trigger": "xTextAdvance\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.xTextAdvance"
    },
    {
      "trigger": "fontGlyphWidthColor\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.fontGlyphWidthColor"
    },
    {
      "trigger": "fontGlyphWidth\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.fontGlyphWidth"
    },
    {
      "trigger": "beginCodeSpaceRange\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.beginCodeSpaceRange"
    },
    {
      "trigger": "endCodeSpaceRange\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.endCodeSpaceRange"
    },
    {
      "trigger": "beginbfchar\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.beginbfchar"
    },
    {
      "trigger": "endbfchar\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.endbfchar"
    },
    {
      "trigger": "beginbfrange\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.beginbfrange"
    },
    {
      "trigger": "endbfrange\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.endbfrange"
    },
    {
      "trigger": "beginMarkedContentProperties\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.beginMarkedContentProperties"
    },
    {
      "trigger": "beginMarkedContent\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.beginMarkedContent"
    },
    {
      "trigger": "endMarkedContent\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.endMarkedContent"
    },
    {
      "trigger": "defineMarkedContentPointProperties\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.defineMarkedContentPointProperties"
    },
    {
      "trigger": "defineMarkedContentPoint\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.defineMarkedContentPoint"
    },
    {
      "trigger": "beginFunction\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.beginFunction"
    },
    {
      "trigger": "endFunction\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.endFunction"
    },
    {
      "trigger": "beginCompatibility\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.beginCompatibility"
    },
    {
      "trigger": "endCompatibility\tPDFStreamOperation.Operator",
      "contents": "PDFStreamOperation.Operator.endCompatibility"
    },
    {
      "trigger": "butt\tPDFGraphicsState.LineCap",
      "contents": "PDFGraphicsState.LineCap.butt"
    },
    {
      "trigger": "round\tPDFGraphicsState.LineCap",
      "contents": "PDFGraphicsState.LineCap.round"
    },
    {
      "trigger": "square\tPDFGraphicsState.LineCap",
      "contents": "PDFGraphicsState.LineCap.square"
    },
    {
      "trigger": "miter\tPDFGraphicsState.LineJoin",
      "contents": "PDFGraphicsState.LineJoin.miter"
    },
    {
      "trigger": "round\tPDFGraphicsState.LineJoin",
      "contents": "PDFGraphicsState.LineJoin.round"
    },
    {
      "trigger": "square\tPDFGraphicsState.LineJoin",
      "contents": "PDFGraphicsState.LineJoin.square"
    },
    {
      "trigger": "fill\tPDFGraphicsState.TextRenderingMode",
      "contents": "PDFGraphicsState.TextRenderingMode.fill"
    },
    {
      "trigger": "stroke\tPDFGraphicsState.TextRenderingMode",
      "contents": "PDFGraphicsState.TextRenderingMode.stroke"
    },
    {
      "trigger": "fillStroke\tPDFGraphicsState.TextRenderingMode",
      "contents": "PDFGraphicsState.TextRenderingMode.fillStroke"
    },
    {
      "trigger": "invisible\tPDFGraphicsState.TextRenderingMode",
      "contents": "PDFGraphicsState.TextRenderingMode.invisible"
    },
    {
      "trigger": "fillAddPath\tPDFGraphicsState.TextRenderingMode",
      "contents": "PDFGraphicsState.TextRenderingMode.fillAddPath"
    },
    {
      "trigger": "strokeAddPath\tPDFGraphicsState.TextRenderingMode",
      "contents": "PDFGraphicsState.TextRenderingMode.strokeAddPath"
    },
    {
      "trigger": "fillStrokeAddPath\tPDFGraphicsState.TextRenderingMode",
      "contents": "PDFGraphicsState.TextRenderingMode.fillStrokeAddPath"
    },
    {
      "trigger": "addPath\tPDFGraphicsState.TextRenderingMode",
      "contents": "PDFGraphicsState.TextRenderingMode.addPath"
    },
    {
      "trigger": "trueType\tFNTOpenTypeConstructor.GlyphType",
      "contents": "FNTOpenTypeConstructor.GlyphType.trueType"
    },
    {
      "trigger": "compactFontFormat\tFNTOpenTypeConstructor.GlyphType",
      "contents": "FNTOpenTypeConstructor.GlyphType.compactFontFormat"
    }
  ]
}